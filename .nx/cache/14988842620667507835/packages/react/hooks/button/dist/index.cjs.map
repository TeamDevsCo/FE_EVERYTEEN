{
  "version": 3,
  "sources": ["../src/index.ts", "../src/useButton.tsx", "../src/useToggleButton.ts"],
  "sourcesContent": ["export type { ButtonElementType, BaseButtonProps } from \"./types\";\nexport { useButton } from \"./useButton\";\nexport { useToggleButton } from \"./useToggleButton\";\n", "import { BaseButtonProps, OverloadedButtonFunction } from \"./types\";\n\nexport const useButton: OverloadedButtonFunction = (props: any): any => {\n  const {\n    elementType = \"button\",\n    isDisabled,\n    isLoading,\n    tabIndex,\n    onKeyDown,\n    type = \"button\",\n  } = props;\n\n  const disabled = isDisabled || isLoading;\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    onKeyDown?.(event);\n\n    if (event.key === \" \" || event.key === \"Spacebar\" || event.key === \"32\") {\n      if (disabled) return;\n      if (event.defaultPrevented) return;\n      if (elementType === \"button\") return;\n\n      event.preventDefault();\n      (event.currentTarget as HTMLElement).click();\n\n      return;\n    }\n\n    if (event.key === \"Enter\" || event.key === \"13\") {\n      if (disabled) return;\n      if (event.defaultPrevented) return;\n      if (elementType === \"input\" && type !== \"button\") return;\n\n      event.preventDefault();\n      (event.currentTarget as HTMLElement).click();\n\n      return;\n    }\n  };\n\n  const baseProps = {\n    ...props,\n    \"data-loading\": isLoading,\n    tabIndex: disabled ? undefined : (tabIndex ?? 0),\n    onKeyDown: handleKeyDown,\n  };\n\n  let additionalProps = {};\n\n  switch (elementType) {\n    case \"button\": {\n      additionalProps = {\n        type: type ?? \"button\",\n        disabled,\n      };\n      break;\n    }\n    case \"a\": {\n      const { href, target, rel } = props as BaseButtonProps<\"a\">;\n\n      additionalProps = {\n        role: \"button\",\n        href: disabled ? undefined : href,\n        target: disabled ? undefined : target,\n        rel: disabled ? undefined : rel,\n        \"area-disabled\": isDisabled,\n      };\n      break;\n    }\n    case \"input\": {\n      additionalProps = {\n        role: \"button\",\n        type: props.type,\n        disabled,\n        \"area-disabled\": undefined,\n      };\n      break;\n    }\n    default: {\n      additionalProps = {\n        role: \"button\",\n        type: type ?? \"button\",\n        \"area-disabled\": isDisabled,\n      };\n      break;\n    }\n  }\n\n  const buttonProps = {\n    ...baseProps,\n    ...additionalProps,\n  };\n\n  return {\n    buttonProps,\n  };\n};\n", "import { useToggle } from \"@everyteen/react-hooks-toggle\";\nimport { OverloadedToggleButtonFunction } from \"./types\";\nimport { useButton } from \"./useButton\";\n\nexport const useToggleButton: OverloadedToggleButtonFunction = (\n  props: any,\n  isSelected?: boolean,\n): any => {\n  const { isSelected: _isSelected, toggle } = useToggle({\n    isSelected,\n  });\n\n  const handleClick = (event: React.MouseEvent) => {\n    toggle();\n    props?.onClick?.(event);\n  };\n\n  const { buttonProps } = useButton({\n    ...props,\n    onClick: handleClick,\n  });\n\n  return {\n    buttonProps,\n    isSelected: _isSelected,\n  };\n};\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,eAAAE,EAAA,oBAAAC,IAAA,eAAAC,EAAAJ,GCEO,IAAMK,EAAuCC,GAAoB,CACtE,GAAM,CACJ,YAAAC,EAAc,SACd,WAAAC,EACA,UAAAC,EACA,SAAAC,EACA,UAAAC,EACA,KAAAC,EAAO,QACT,EAAIN,EAEEO,EAAWL,GAAcC,EAEzBK,EAAiBC,GAA+B,CAGpD,GAFAJ,GAAA,MAAAA,EAAYI,GAERA,EAAM,MAAQ,KAAOA,EAAM,MAAQ,YAAcA,EAAM,MAAQ,KAAM,CAGvE,GAFIF,GACAE,EAAM,kBACNR,IAAgB,SAAU,OAE9BQ,EAAM,eAAe,EACpBA,EAAM,cAA8B,MAAM,EAE3C,MACF,CAEA,GAAIA,EAAM,MAAQ,SAAWA,EAAM,MAAQ,KAAM,CAG/C,GAFIF,GACAE,EAAM,kBACNR,IAAgB,SAAWK,IAAS,SAAU,OAElDG,EAAM,eAAe,EACpBA,EAAM,cAA8B,MAAM,EAE3C,MACF,CACF,EAEMC,EAAY,CAChB,GAAGV,EACH,eAAgBG,EAChB,SAAUI,EAAW,OAAaH,GAAA,KAAAA,EAAY,EAC9C,UAAWI,CACb,EAEIG,EAAkB,CAAC,EAEvB,OAAQV,EAAa,CACnB,IAAK,SAAU,CACbU,EAAkB,CAChB,KAAML,GAAA,KAAAA,EAAQ,SACd,SAAAC,CACF,EACA,KACF,CACA,IAAK,IAAK,CACR,GAAM,CAAE,KAAAK,EAAM,OAAAC,EAAQ,IAAAC,CAAI,EAAId,EAE9BW,EAAkB,CAChB,KAAM,SACN,KAAMJ,EAAW,OAAYK,EAC7B,OAAQL,EAAW,OAAYM,EAC/B,IAAKN,EAAW,OAAYO,EAC5B,gBAAiBZ,CACnB,EACA,KACF,CACA,IAAK,QAAS,CACZS,EAAkB,CAChB,KAAM,SACN,KAAMX,EAAM,KACZ,SAAAO,EACA,gBAAiB,MACnB,EACA,KACF,CACA,QAAS,CACPI,EAAkB,CAChB,KAAM,SACN,KAAML,GAAA,KAAAA,EAAQ,SACd,gBAAiBJ,CACnB,EACA,KACF,CACF,CAOA,MAAO,CACL,YANkB,CAClB,GAAGQ,EACH,GAAGC,CACL,CAIA,CACF,EChGA,IAAAI,EAA0B,yCAInB,IAAMC,EAAkD,CAC7DC,EACAC,IACQ,CACR,GAAM,CAAE,WAAYC,EAAa,OAAAC,CAAO,KAAI,aAAU,CACpD,WAAAF,CACF,CAAC,EAEKG,EAAeC,GAA4B,CAZnD,IAAAC,EAaIH,EAAO,GACPG,EAAAN,GAAA,YAAAA,EAAO,UAAP,MAAAM,EAAA,KAAAN,EAAiBK,EACnB,EAEM,CAAE,YAAAE,CAAY,EAAIC,EAAU,CAChC,GAAGR,EACH,QAASI,CACX,CAAC,EAED,MAAO,CACL,YAAAG,EACA,WAAYL,CACd,CACF",
  "names": ["src_exports", "__export", "useButton", "useToggleButton", "__toCommonJS", "useButton", "props", "elementType", "isDisabled", "isLoading", "tabIndex", "onKeyDown", "type", "disabled", "handleKeyDown", "event", "baseProps", "additionalProps", "href", "target", "rel", "import_react_hooks_toggle", "useToggleButton", "props", "isSelected", "_isSelected", "toggle", "handleClick", "event", "_a", "buttonProps", "useButton"]
}
